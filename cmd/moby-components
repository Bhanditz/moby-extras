#!/bin/bash

set -e

cmd_usage() {
	cat <<-EOF
		Usage: $(basename $0) list | update (--all | <component>)
EOF
}

cmd_list() {
	for component in $(list_components); do
		echo -n "$component "
		dir="$REPOROOT/components/$component"
		[ ! -d "$dir" ] && echo "not-merged" && continue
		latestCommit=$(git log --format=%H -1 "$dir")
		baseCommit=$(git merge-base $latestCommit master)
		mergeCommit=$(git log --merges -1 --format=%H --grep "Merge commit 'refs/components/$component/cache'" master)
		# get the second parent of mergecommit
		# TODO: actually take upstream, not cached version, look up commit in notes
		upstreamCommit=$(git rev-list --merges --parents $mergeCommit -1 --min-parents=2 --max-parents=2 | cut -d' ' -f3)
		echo "latest:$latestCommit merge:$mergeCommit upstream(todo):$upstreamCommit"
	done
}

cmd_update() {
	[ -z "$1" ] && cmd_usage && exit 1
	case "$1" in
	--help)
		cmd_usage
		return
		;;
	--all)
		components="$(list_components)"
		;;
	*)
		components="$1"
		;;
	esac
	echo Updating: $components

	for component in $components; do
		update_source "$component"
	done
	for component in $components; do
		update_cache "$component"
	done
}

list_components() {
	git config --name-only --get-regexp 'component\.[^.]*\.url' |
	sed -e 's/^component\.//' -e 's/\.url$//'
}

update_source() {
	component=$1
	url=$(git config --get component.$component.url)
	branch=$(git config --get component.$component.branch)
	echo "[$component] fetching $url $branch"
	git fetch $url $branch:refs/components/$component/src
}


get_mountpoint() {
	echo "components/$1"
}

update_cache() {
	component=$1
	src=refs/components/$component/src
	tmp=refs/components/$component/tmp/$RANDOM
	cache=refs/components/$component/cache
	git update-ref $tmp $(git show-ref --verify -s $src)
	git show-ref --verify $tmp
	mountpoint=$(get_mountpoint "$component")
	transform_branch $tmp $mountpoint
	echo "[$component] moving $tmp to $cache"
	git update-ref $cache $(git show-ref --verify -s $tmp)
	git update-ref -d $tmp
	git update-ref -d refs/original/$tmp
	git show-ref --verify $cache
}

transform_branch() {
	branch=$1
	mountpoint=$2

	if [ -z "$mountpoint" ]; then
		return
	fi
	git filter-branch -f --index-filter "
		git ls-files -s | sed 's,	,	$mountpoint/,' |
		GIT_INDEX_FILE=\$GIT_INDEX_FILE.new git update-index --index-info &&
		if test -f \"\$GIT_INDEX_FILE.new\"; then
			mv \$GIT_INDEX_FILE.new \$GIT_INDEX_FILE;
		fi
	" $branch
}

export GIT_CONFIG=`pwd`/components.conf

# Change the working directory to the root of the git repo
REPOROOT=$(git rev-parse --show-toplevel)
cd $REPOROOT

case "$1" in
list)
	cmd_list
	;;
update)
	shift
	cmd_update $*
	;;
help)
	cmd_usage
	;;
*)
	cmd_usage >&2
	exit 1
	;;
esac
