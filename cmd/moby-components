#!/bin/bash

set -e

cmd_usage() {
	cat <<EOF
Usage: $(basename $0) <command>

Tool to manage multiple upstream git repositories in one big repository.

Commands:
	list
	fetch	<component> | --all
	update  <component> | --all
EOF
}

cmd_list() {
	for component in $(list_components); do
		echo -n "$component "
		dir="$REPOROOT/components/$component"
		[ ! -d "$dir" ] && echo "not-merged" && continue
		latestCommit=$(get_latest_commit "$dir")
		mergeCommit=$(get_merge_commit "$component" master)
		upstreamCommit=$(get_upstream_commit "$mergeCommit")
		echo "latest:$latestCommit merge:$mergeCommit upstream:$upstreamCommit"
	done
}

get_components() {
	[ -z "$1" ] && cmd_usage >&2 && exit 1
	case "$1" in
	--help)
		cmd_usage
		exit 0
		;;
	--all)
		list_components
		;;
	*)
		echo "$1"
		;;
	esac
}

cmd_fetch() {
	components=$(get_components $*)
	fetch_all_source $components
}

cmd_update() {
	components=$(get_components $*)
	fetch_all_source $components

	echo "Updating: $components"
	for component in $components; do
		update_cache "$component"
		url=$(git config --get component.$component.url)
		branch=$(git config --get component.$component.branch)
		# if you change the wording make sure you update the grep in get_merge_commits
		git merge -m "Merging component $component from $branch at $url" --allow-unrelated-histories "refs/components/$component/cache"
	done
}

get_latest_commit() {
	dir="$1"
	git log --format=%H -1 "$dir"
}

get_merge_commit() {
	component="$1"
	branch="$2"
	git log --merges -1 --format=%H --grep "Merging component $component from " "$branch"
}

get_upstream_commit() {
	mergeCommit="$1"
	# get the second parent of mergecommit
	upstreamCommits=$(git rev-list --merges --parents "$mergeCommit" -1 --min-parents=2)
	upstreamCommit=$(echo "$upstreamCommits" | cut -d' ' -f3-)
	[[ "$upstreamCommit" != "${upstreamCommit/ /}" ]] && echo "Merge commit with more than 2 parents detected: $upstreamCommits" && return 1
	echo "$upstreamCommit"
}

list_components() {
	git config --name-only --get-regexp 'component\.[^.]*\.url' |
	sed -e 's/^component\.//' -e 's/\.url$//'
}

fetch_source() {
	component="$1"
	url=$(git config --get component.$component.url)
	branch=$(git config --get component.$component.branch)
	echo "[$component] fetching $url $branch"
	git fetch $url $branch:refs/components/$component/src
}

fetch_all_source() {
	components="$*"
	echo "Fetching: $components"
	for component in $components; do
		fetch_source "$component"
	done
}

get_mountpoint() {
	echo "components/$1"
}

update_cache() {
	component="$1"
	src=refs/components/$component/src
	tmp=refs/components/$component/tmp/$RANDOM
	cache=refs/components/$component/cache

	# create $tmp ref starting at same commit as $src ref
	git update-ref $tmp $(git show-ref --verify -s $src)
	git show-ref --verify $tmp
	mountpoint=$(get_mountpoint "$component")

	transform_branch $tmp $mountpoint

	echo "[$component] moving $tmp to $cache"
	git update-ref $cache $(git show-ref --verify -s $tmp)
	git update-ref -d $tmp
	git update-ref -d refs/original/$tmp
	git show-ref --verify $cache

}

transform_branch() {
	branch=$1
	mountpoint=$2

	if [ -z "$mountpoint" ]; then
		return
	fi
	git filter-branch -f --index-filter "
		git ls-files -s | sed 's,	,	$mountpoint/,' |
		GIT_INDEX_FILE=\$GIT_INDEX_FILE.new git update-index --index-info &&
		if test -f \"\$GIT_INDEX_FILE.new\"; then
			mv \$GIT_INDEX_FILE.new \$GIT_INDEX_FILE;
		fi
	" --msg-filter "
		cat && echo Upstream-commit: \$GIT_COMMIT
	" $branch
}

export GIT_CONFIG=`pwd`/components.conf

# Change the working directory to the root of the git repo
REPOROOT=$(git rev-parse --show-toplevel)
cd $REPOROOT

case "$1" in
list)
	cmd_list
	;;
fetch)
	shift
	cmd_fetch $*
	;;
update)
	shift
	cmd_update $*
	;;
help)
	cmd_usage
	;;
*)
	cmd_usage >&2
	exit 1
	;;
esac
